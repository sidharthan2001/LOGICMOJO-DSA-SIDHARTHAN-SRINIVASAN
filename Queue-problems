1) Implementation of Queue:

import java.util.* ;
import java.io.*; 

class Node{
        int data;
        Node next;

        Node(int data){
            this.data = data;
            this.next = null;
        }

        Node(int data, Node next){
            this.data= data;
            this.next = next;
        }


}

public class Queue {
    private Node front;
    private Node rear;
    Queue() {
        // Implement the Constructor
        front = null;
        rear = null;
    }

    /*----------------- Public Functions of Queue -----------------*/

    boolean isEmpty() {
        // Implement the isEmpty() function
        return front == null;
    }

    void enqueue(int data) {
        // Implement the enqueue() function
        Node newNode = new Node(data);

        if(rear == null){
            front = newNode;
            rear = newNode;
        }
        else{
            rear.next = newNode;
            rear = newNode;
        }
    }

    int dequeue() {
        // Implement the dequeue() function
        if(isEmpty()){
            return -1;
        }

        int value = front.data;
        front = front.next;
        if(front == null){
            rear = null;
        }
        
        return value;
    }

    int front() {
        // Implement the front() function
        if(isEmpty()){
            return -1;
        }

        return front.data;
    }

}


=============================================================================================================================================================================================================================================================================


1) Implementation of Queue:

import java.util.* ;
import java.io.*; 

class Node{
        int data;
        Node next;

        Node(int data){
            this.data = data;
            this.next = null;
        }

        Node(int data, Node next){
            this.data= data;
            this.next = next;
        }


}

public class Queue {
    private Node front;
    private Node rear;
    Queue() {
        // Implement the Constructor
        front = null;
        rear = null;
    }

    /*----------------- Public Functions of Queue -----------------*/

    boolean isEmpty() {
        // Implement the isEmpty() function
        return front == null;
    }

    void enqueue(int data) {
        // Implement the enqueue() function
        Node newNode = new Node(data);

        if(rear == null){
            front = newNode;
            rear = newNode;
        }
        else{
            rear.next = newNode;
            rear = newNode;
        }
    }

    int dequeue() {
        // Implement the dequeue() function
        if(isEmpty()){
            return -1;
        }

        int value = front.data;
        front = front.next;
        if(front == null){
            rear = null;
        }
        
        return value;
    }

    int front() {
        // Implement the front() function
        if(isEmpty()){
            return -1;
        }

        return front.data;
    }

}


=============================================================================================================================================================================================================================================================================
2) IMplementation of queue using stack


class MyQueue {
    private Stack<Integer> stack1;
    private Stack<Integer> stack2;
    public MyQueue() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }
    
    public void push(int x) {
        stack1.push(x);
    }
    
    public int pop() {
        if(stack2.isEmpty()){
            while (!stack1.isEmpty()){
                int value = stack1.pop();
                stack2.push(value); 
            }
        }

        return stack2.pop();
    }
    
    public int peek() {
        if(stack2.isEmpty()){
            while (!stack1.isEmpty()){
                int value = stack1.pop();
                stack2.push(value); 
            }
        }

        return stack2.peek();
    }
    
    public boolean empty() {
        return stack1.isEmpty() && stack2.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */

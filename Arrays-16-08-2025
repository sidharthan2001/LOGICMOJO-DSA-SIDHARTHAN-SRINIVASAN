1) Majority elements:

class Solution {
    public int majorityElement(int[] nums) {
        int half = nums.length / 2 ;

        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();

        for(int i = 0; i<nums.length ; i++){
            if(freq.containsKey(nums[i])){
                freq.put(nums[i], freq.get(nums[i]) + 1);
            }
            else{
                freq.put(nums[i], 1);
            }
        }

        for(int num : freq.keySet()){
            int count = freq.get(num);
            if (count > half){
                return num;
            }
        }
    return -1;
    }
}


                      (OR)
Boyerâ€“Moore Majority Vote [Set vote to zero. vote for a new guy, if other guy comes in decrease the vote. If the guy keeps coming then keep voting for him]

class Solution {
    public int majorityElement(int[] nums) {
       int votes = 0 , candidate = 0 ;

       for(int i = 0 ; i <nums.length; i++){
            if(votes == 0){
                candidate = nums[i];
                votes++;
            }
            else{
                if(nums[i] == candidate){
                    votes++;
                }
                else{
                    votes--;
                }
            }
       }
    return candidate;
    }
}

[add this if needed at end]

votes = 0;
        for(int i = 0 ; i < nums.length; i++){
            if (nums[i] == candidate){
                votes++;
            }
        }

        if(votes > nums.length/2){
            return candidate;
        }

============================================================================================================================================================================================================================

2)  Maximum Difference Between Increasing Elements [Time to sell stock similar question]

class Solution {
    public int maximumDifference(int[] nums) {
        int maxi = -1;
        int min = nums[0];
        for(int i = 1 ; i< nums.length; i++){
            if(nums[i] > min){
                maxi = Math.max(maxi, nums[i] - min);
            }
            else{
                
                min = nums[i];
            }
        }
    return maxi;
    }
}




============================================================================================================================================================================================================================


3) Separate 0s and 1s:


class Solution {
    void segregate0and1(int[] arr) {
        // code here
        int l = 0 ; 
        
        int r = arr.length - 1;
        
        while(l<r){
            if(arr[l] == 0){
                l++;
            }
            else if (arr[r] == 1){
                r--;
            }
            else{
                int temp = arr[l];
                arr[l] = arr[r];
                arr[r] = temp;
            }
        }


============================================================================================================================================================================================================================
4) Majority element 2:


class Solution {
    public int majorityElement(int[] nums) {
        int half = nums.length / 2 ;

        Map<Integer, Integer> freq = new HashMap<Integer, Integer>();

        for(int i = 0; i<nums.length ; i++){
            if(freq.containsKey(nums[i])){
                freq.put(nums[i], freq.get(nums[i]) + 1);
            }
            else{
                freq.put(nums[i], 1);
            }
        }

        for(int num : freq.keySet()){
            int count = freq.get(num);
            if (count > half){
                return num;
            }
        }
    return -1;
    }
}
       
    }
}

============================================================================================================================================================================================================================

5) Two sum -Pairs with 0 Sum:

import java.util.ArrayList;
import java.util.*;
class Solution {
    public static ArrayList<ArrayList<Integer>> getPairs(int[] arr) {
        // code here
        Arrays.sort(arr);
        HashSet<Integer> set = new HashSet<>();
        
        for(int i = 0 ; i<arr.length; i++){
            set.add(arr[i]);
        }
        
        ArrayList<Integer> newArr = new ArrayList<>(set);
        Collections.sort(newArr);
        int l = 0; 
        int r = newArr.size()-1;
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        while(l < r){
            if(newArr.get(l) + newArr.get(r) == 0){
                ArrayList<Integer> pair = new ArrayList<>();
                
                pair.add(newArr.get(l));
                pair.add(newArr.get(r));
                res.add(pair);
                l++;
                r--;
            }
            else if(newArr.get(l) + newArr.get(r) > 0){
                r--;
            }
            else{
                l++;
            }
        }
    return res;
    }
}

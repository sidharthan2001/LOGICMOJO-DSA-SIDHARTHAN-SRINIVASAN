1) TRIPLE SUM:

Trivial Approach:

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int sum = 0;
        HashSet<List<Integer>> set = new HashSet<>();
        for(int i = 0 ; i < nums.length; i++){
            for(int j = i + 1 ; j < nums.length ; j++){
                for(int k = j + 1 ; k < nums.length; k++){
                    sum = nums[i] + nums[j] + nums[k];

                    if(sum == 0 && i!=j && i!=k && j!=k){
                       ArrayList<Integer> pair = new ArrayList<>();
                       pair.add(nums[i]);  
                       pair.add(nums[j]);
                       pair.add(nums[k]);
                       Collections.sort(pair);
                       set.add(pair);
                       
                    }

                    
                }
            }
        }
    return new ArrayList<>(set);
    }
}

                          (OR)

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        int sum = 0;
        HashSet<List<Integer>> set = new HashSet<>();
        for(int i = 0 ; i < nums.length; i++){
            int l = i + 1;
            int r = nums.length - 1;
            while(l < r){
                sum = nums[i] + nums[l] + nums[r];
                if (sum == 0){
                    ArrayList<Integer> pair = new ArrayList<>();
                    pair.add(nums[i]);
                    pair.add(nums[l]);
                    pair.add(nums[r]);
                    set.add(pair);
                    l++;
                    r--;
                }
                else if (sum < 0 ){
                    l++;
                }
                else {
                    r--;
                }
            }           
        }
    return new ArrayList<>(set);
    }
}

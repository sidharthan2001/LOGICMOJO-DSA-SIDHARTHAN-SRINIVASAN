Linked list operations

*Insertion
*Reverse
*Deletion
*Search
*Traversal


1) Traversal of linkedlist:

class Main {
    
    public static class Node {
        int data;
        Node next = null;
        
        //empty constructor
        Node(){
            
        }
        
        //Node with data alone
        Node(int data){
            this.data = data;
        }
        
        //constructor with data and next reference
        Node(int data, Node next){
            this.data = data;
            this.next = next;
        }
    }
    
    public static void iterativeTraverse(Node head){
        Node curr = head;
        
        while(curr != null){
            System.out.print(curr.data + "-->");
            curr = curr.next;
            
        }
    }
    
    public static void main(String[] args) {
        Node head = null;
        
        Node node1 = new Node(5);
        head = node1;
        
        Node node2 = new Node(4);
        node1.next = node2;
        
        Node node3 = new Node(3);
        node2.next = node3;
        
        Node node4 = new Node(11);
        node3.next = node4;
        
        iterativeTraverse(node1);
        
    }
}


==============================================================================================================================================================================================================================================================================


2) Insertion at beginning and end and also at a particular position:

class Main {
    
    public static class Node {
        int data;
        Node next = null;
        
        //empty constructor
        Node(){
            
        }
        
        //Node with data alone
        Node(int data){
            this.data = data;
        }
        
        //constructor with data and next reference
        Node(int data, Node next){
            this.data = data;
            this.next = next;
        }
    }
    
    public static void insertAtAnyPosition(Node head, int prevValue, int value){
        // steps:
        // create  a node
        // iterate till you hit the respective position
        // the new node next should be pointing as same as curr.next
        // not set the curr.next to new node.
        Node newNode = new Node(value);
        
        Node curr = head;
        
        while(curr.data != prevValue){
            curr = curr.next;
        }
        
        newNode.next = curr.next; // the new node should point to the next of curr node
        
        curr.next = newNode; // now curr.next should point to the new node
        
        Node bat = head;
        
        while(bat != null){
            System.out.print(bat.data + "-->");
            bat = bat.next;
        }
        
    }
    
    public static void insertAtLast(Node head, int value){
        Node newNode = new Node(value);
        
        Node curr = head;
        while(curr.next != null){
            System.out.print(curr.data + "-->");
            curr = curr.next;
        }
        curr.next = newNode;
        System.out.println("after");
        Node bat = head;
        while(bat != null){
            System.out.print(bat.data + "-->");
            bat = bat.next;
        }
    }
    
    
    public static void insertAtBeginning(Node head, int value){
        Node newNode =  new Node(value);
        
        newNode.next = head;
        
        head = newNode;
        
        Node curr = head;
        
        while(curr != null){
            System.out.print(curr.data + "-->");
            curr = curr.next;
            
        }
    }
    
    
    public static void iterativeTraverse(Node head){
        Node curr = head;
        
        while(curr != null){
            System.out.print(curr.data + "-->");
            curr = curr.next;
            
        }
    }
    
    public static void main(String[] args) {
        Node head = null;
        
        Node node1 = new Node(5);
        head = node1;
        
        Node node2 = new Node(4);
        node1.next = node2;
        
        Node node3 = new Node(3);
        node2.next = node3;
        
        Node node4 = new Node(11);
        node3.next = node4;
        
        iterativeTraverse(node1);
        // System.out.println();
        // insertAtBeginning(head, 17);
        // System.out.println();
        // insertAtLast(head, 19);
        System.out.println();
        insertAtAnyPosition(head, 3, 21);
        
    }
}


==============================================================================================================================================================================================================================


3) Searching


class Main {
    
    public static class Node {
        int data;
        Node next = null;
        
        //empty constructor
        Node(){
            
        }
        
        //Node with data alone
        Node(int data){
            this.data = data;
        }
        
        //constructor with data and next reference
        Node(int data, Node next){
            this.data = data;
            this.next = next;
        }
    }
    
    
    public static void searchForANode(Node head, int value){
        Node newNode = new Node(value);
        
        Node curr = head;
        
        while(curr.next != null && curr.data != value){
            curr = curr.next;
        }
        if(curr.data == value) System.out.print(curr.data);
        else System.out.print("Node not found");
        // System.out.print(curr.data);
    }
    
    
    
    public static void insertAtAnyPosition(Node head, int prevValue, int value){
        // steps:
        // create  a node
        // iterate till you hit the respective position
        // the new node next should be pointing as same as curr.next
        // not set the curr.next to new node.
        Node newNode = new Node(value);
        
        Node curr = head;
        
        while(curr.data != prevValue){
            curr = curr.next;
        }
        
        newNode.next = curr.next; // the new node should point to the next of curr node
        
        curr.next = newNode; // now curr.next should point to the new node
        
        Node bat = head;
        
        while(bat != null){
            System.out.print(bat.data + "-->");
            bat = bat.next;
        }
        
    }
    
    public static void insertAtLast(Node head, int value){
        Node newNode = new Node(value);
        
        Node curr = head;
        while(curr.next != null){
            System.out.print(curr.data + "-->");
            curr = curr.next;
        }
        curr.next = newNode;
        System.out.println("after");
        Node bat = head;
        while(bat != null){
            System.out.print(bat.data + "-->");
            bat = bat.next;
        }
    }
    
    
    public static void insertAtBeginning(Node head, int value){
        Node newNode =  new Node(value);
        
        newNode.next = head;
        
        head = newNode;
        
        Node curr = head;
        
        while(curr != null){
            System.out.print(curr.data + "-->");
            curr = curr.next;
            
        }
    }
    
    
    public static void iterativeTraverse(Node head){
        Node curr = head;
        
        while(curr != null){
            System.out.print(curr.data + "-->");
            curr = curr.next;
            
        }
    }
    
    public static void main(String[] args) {
        Node head = null;
        
        Node node1 = new Node(5);
        head = node1;
        
        Node node2 = new Node(4);
        node1.next = node2;
        
        Node node3 = new Node(3);
        node2.next = node3;
        
        Node node4 = new Node(11);
        node3.next = node4;
        
        iterativeTraverse(node1);
        // System.out.println();
        // insertAtBeginning(head, 17);
        // System.out.println();
        // insertAtLast(head, 19);
        // System.out.println();
        // insertAtAnyPosition(head, 3, 21);
        System.out.println();
        searchForANode(head, 11);
        
        
    }
}


                        (OR)

    
public static void searchForANode(Node head, int value){  // efficient way
        Node newNode = new Node(value);
        
        Node curr = head;
        
        while(curr != null){
            if(curr.data == value){
                System.out.print(curr.data);
                return;
            }
            
            curr = curr.next;
        }
        
        System.out.print("Node not found");
        
    }


==============================================================================================================================================================================================================================

4) deletion:

class Main {
    
    public static class Node {
        int data;
        Node next = null;
        
        //empty constructor
        Node(){
            
        }
        
        //Node with data alone
        Node(int data){
            this.data = data;
        }
        
        //constructor with data and next reference
        Node(int data, Node next){
            this.data = data;
            this.next = next;
        }
    }
    
    
    public static void deleteNode(Node head, int value){
        
        Node curr = head;
        Node prev = null;
        
        if(curr.data == value && curr!=null){
            head = curr.next;
        }
        else{
            while(curr != null && curr.data != value){
                prev=curr;
                curr = curr.next;
            }
            prev.next = curr.next;
        }
        
        Node bat = head;
        while(bat != null){
            System.out.print(bat.data + "-->");
            bat= bat.next;
        }
        
    }
    
    
    public static void searchForANode(Node head, int value){
        Node newNode = new Node(value);
        
        Node curr = head;
        
        while(curr.next != null && curr.data != value){
            curr = curr.next;
        }
        if(curr.data == value) System.out.print(curr.data);
        else System.out.print("Node not found");
        // System.out.print(curr.data);
    }
    
    
    
    public static void insertAtAnyPosition(Node head, int prevValue, int value){
        // steps:
        // create  a node
        // iterate till you hit the respective position
        // the new node next should be pointing as same as curr.next
        // not set the curr.next to new node.
        Node newNode = new Node(value);
        
        Node curr = head;
        
        while(curr.data != prevValue){
            curr = curr.next;
        }
        
        newNode.next = curr.next; // the new node should point to the next of curr node
        
        curr.next = newNode; // now curr.next should point to the new node
        
        Node bat = head;
        
        while(bat != null){
            System.out.print(bat.data + "-->");
            bat = bat.next;
        }
        
    }
    
    public static void insertAtLast(Node head, int value){
        Node newNode = new Node(value);
        
        Node curr = head;
        while(curr.next != null){
            System.out.print(curr.data + "-->");
            curr = curr.next;
        }
        curr.next = newNode;
        System.out.println("after");
        Node bat = head;
        while(bat != null){
            System.out.print(bat.data + "-->");
            bat = bat.next;
        }
    }
    
    
    public static void insertAtBeginning(Node head, int value){
        Node newNode =  new Node(value);
        
        newNode.next = head;
        
        head = newNode;
        
        Node curr = head;
        
        while(curr != null){
            System.out.print(curr.data + "-->");
            curr = curr.next;
            
        }
    }
    
    
    public static void iterativeTraverse(Node head){
        Node curr = head;
        
        while(curr != null){
            System.out.print(curr.data + "-->");
            curr = curr.next;
            
        }
    }
    
    public static void main(String[] args) {
        Node head = null;
        
        Node node1 = new Node(5);
        head = node1;
        
        Node node2 = new Node(4);
        node1.next = node2;
        
        Node node3 = new Node(3);
        node2.next = node3;
        
        Node node4 = new Node(11);
        node3.next = node4;
        
        iterativeTraverse(node1);
        System.out.println();
        // insertAtBeginning(head, 17);
        // System.out.println();
        // insertAtLast(head, 19);
        // System.out.println();
        // insertAtAnyPosition(head, 3, 21);
        deleteNode(head, 11);
        System.out.println();
        searchForANode(head, 11);
        
        
    }
}

1) sEARCH ON ROTATED ARRAY.

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'search_element' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY arr
     *  2. INTEGER target
     */

    public static int search_element(List<Integer> arr, int target) {
    // Write your code here
       
        int l = 0;
        int r = arr.size() - 1;
        
        while(l<=r){
            int mid = l + (r - l)/2;
            
            if(arr.get(mid) == target){
                return mid;
            }
            
            if(arr.get(l) <= arr.get(mid)){
                if(target < arr.get(mid) && target >= arr.get(l)){
                    r = mid -1 ;
                }
                else{
                    l = mid + 1;
                }
            }
            else{
                if(target > arr.get(mid) && target <= arr.get(r)){
                    l = mid+ 1;
                }
                else{
                    r= mid - 1;
                }
            }
        }
        return -1;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        int target = Integer.parseInt(bufferedReader.readLine().trim());

        String[] arrTemp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> arr = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            int arrItem = Integer.parseInt(arrTemp[i]);
            arr.add(arrItem);
        }

        int result = Result.search_element(arr, target);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

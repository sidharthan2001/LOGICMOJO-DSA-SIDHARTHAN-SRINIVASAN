1)  Binary Tree Level Order Traversal:

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> arr = new ArrayList<>();

        if(root == null ) return arr;
        
        Queue<TreeNode> q = new ArrayDeque<>();
        
        q.add(root);
        
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> part = new ArrayList<>();

            for(int i = 0; i < size ; i++){
                TreeNode curr = q.poll();
                part.add(curr.val);
                if(curr.left != null) q.add(curr.left);
                if(curr.right != null) q.add(curr.right);
            }
            arr.add(part);
        }
        
        return arr;
    }
}

==============================================================================================================================================================================================================================

2) preorder traversal

class Solution {
    
    public void traversal(Node curr, ArrayList<Integer> res){
        
        if (curr == null) return;
        
        res.add(curr.data);
        traversal(curr.left, res);
        traversal(curr.right, res);
    }
    
    public ArrayList<Integer> preOrder(Node root) {
        //  code here
       ArrayList<Integer> res = new ArrayList<>();
       traversal(root, res);
       return res;
    }
}

Inorder traversal:

class Solution {
    
    public void traversal(Node curr, ArrayList<Integer> res){
        
        if (curr == null) return;
        
        
        traversal(curr.left, res);
        res.add(curr.data);
        traversal(curr.right, res);
    }
    
    public ArrayList<Integer> inOrder(Node root) {
        // code here
        ArrayList<Integer> res = new ArrayList<>();
       traversal(root, res);
       return res;
    }
}


postOrder traversal:

class Solution {
    
    public void traversal(Node curr, ArrayList<Integer> res){
        
        if (curr == null) return;
        
        
        traversal(curr.left, res);
        traversal(curr.right, res);
        res.add(curr.data);
    }
    
    public ArrayList<Integer> postOrder(Node root) {
        // code here
        ArrayList<Integer> res = new ArrayList<>();
        traversal(root, res);
        return res;
    }
}

1)  Binary Tree Level Order Traversal:

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> arr = new ArrayList<>();

        if(root == null ) return arr;
        
        Queue<TreeNode> q = new ArrayDeque<>();
        
        q.add(root);
        
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> part = new ArrayList<>();

            for(int i = 0; i < size ; i++){
                TreeNode curr = q.poll();
                part.add(curr.val);
                if(curr.left != null) q.add(curr.left);
                if(curr.right != null) q.add(curr.right);
            }
            arr.add(part);
        }
        
        return arr;
    }
}

==============================================================================================================================================================================================================================

2) preorder traversal

class Solution {
    
    public void traversal(Node curr, ArrayList<Integer> res){
        
        if (curr == null) return;
        
        res.add(curr.data);
        traversal(curr.left, res);
        traversal(curr.right, res);
    }
    
    public ArrayList<Integer> preOrder(Node root) {
        //  code here
       ArrayList<Integer> res = new ArrayList<>();
       traversal(root, res);
       return res;
    }
}

Inorder traversal:

class Solution {
    
    public void traversal(Node curr, ArrayList<Integer> res){
        
        if (curr == null) return;
        
        
        traversal(curr.left, res);
        res.add(curr.data);
        traversal(curr.right, res);
    }
    
    public ArrayList<Integer> inOrder(Node root) {
        // code here
        ArrayList<Integer> res = new ArrayList<>();
       traversal(root, res);
       return res;
    }
}


postOrder traversal:

class Solution {
    
    public void traversal(Node curr, ArrayList<Integer> res){
        
        if (curr == null) return;
        
        
        traversal(curr.left, res);
        traversal(curr.right, res);
        res.add(curr.data);
    }
    
    public ArrayList<Integer> postOrder(Node root) {
        // code here
        ArrayList<Integer> res = new ArrayList<>();
        traversal(root, res);
        return res;
    }
}

==============================================================================================================================================================================================================================

3) Deletion of node in Binary Tree:

/*
Node class is as follows:

class Node {
    int data;
    Node left, right;

    public Node(int data){
        this.data = data;
    }
}
*/
class Solution {
    
    public void deleteLast(Node root, Node delNode){
        Queue<Node> q = new ArrayDeque<>();
        
        q.add(root);
        
        while(!q.isEmpty()){
            Node temp = q.poll();
            
            if(temp == delNode){
                temp = null;
                return;
            }
            
            if(temp.left != null){
                if(temp.left == delNode){
                    temp.left = null;
                    return;
                }
                else{
                    q.add(temp.left);
                }
            }
            
            if(temp.right != null){
                if(temp.right == delNode){
                    temp.right = null;
                    return;
                }
                else{
                    q.add(temp.right);
                }
            }
        }
        
    }
    
    public Node deleteNode(Node root, int key) {
        // code here
        
        if(root == null) return null;
        
        if(root.left == null && root.right == null) return root;
        
        Queue<Node> q = new ArrayDeque<>();
        q.add(root);
        
        Node keyNode = null;
        Node temp = null;
        
        while(!q.isEmpty()){
            temp = q.poll();
            
            if(temp.data == key){
                keyNode = temp;
            }
            
            if(temp.left != null) q.add(temp.left);
            if(temp.right != null) q.add(temp.right);
        }
        
        if(keyNode != null){
            int x = temp.data;
            keyNode.data = x;
            deleteLast(root, temp);
        }
        
        return root;
    }
}

For insertion logic:


class Solution {    
    public Node deleteNode(Node root, int key) {
        // code here
        Node newNode = new Node(key);
        if(root == null) return null;
        
        if(root.left == null && root.right == null) return root;
        
        Queue<Node> q = new ArrayDeque<>();
        q.add(root);
            
        while(!q.isEmpty()){
            temp = q.poll();
            if(temp.left == null){
                temp.left = newNode;
                break;
            }
            else{
                q.add(curr.left);
            }

            if(temp.right == null){
                temp.right = newNode;
                break;
            }
            else{
                q.add(curr.right);
            }
        }
        return root;
    }
}

1) stack using linkedlist:

class MyStack {
    // class StackNode {
    //     int data;
    //     StackNode next;
    //     StackNode(int a) {
    //         data = a;
    //         next = null;
    //     }
    // }
    StackNode top;

    // Function to push an integer into the stack.
    void push(int a) {
        // Add your code here
        StackNode newNode = new StackNode(a);
        newNode.next = top;
        top = newNode;
    }

    // Function to remove an item from top of the stack.
    int pop() {
        // Add your code here
        if(top == null) return -1;
        int value = top.data;
        top = top.next;
        return value;
    }
}

===============================================================================================================================================================================================================================================================================

2) Implement stack using queue:


class MyStack {
    private Queue<Integer> queue;
    public MyStack() {
        queue = new LinkedList<>();
    }
    
    public void push(int x) {
        queue.add(x);

        int size = queue.size();

        for(int i = 0; i < size - 1; i++){
            int val = queue.remove();
            queue.add(val);
        }
    }
    
    public int pop() {
        return queue.remove();
    }
    
    public int top() {
        return queue.peek();
    }
    
    public boolean empty() {
        return queue.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */

==============================================================================================================================================================================================================================================================================

3) valid paranthesis:

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        char arr[] = s.toCharArray();

        for(int i = 0 ; i < arr.length; i++){
            if(arr[i] == '(' || arr[i] == '[' || arr[i] == '{'){
                
                stack.push(arr[i]);
            }
            else{
                if(stack.isEmpty()){
                    return false;
                }
                else{
                    char top = stack.pop();
                    if(arr[i] == ')' && top != '(' ||
                        arr[i] == ']' && top != '[' ||
                        arr[i] == '}' && top != '{') return false;

                }
            }
        }
        return stack.isEmpty();
    }
}

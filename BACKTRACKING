1) Generate all binary strings  [DO NOT ADD THERE ARE TWO '1's CONSECUTIVE FOR EXAMPLE DO NOT CONSIDER "011" OR "110"]
   

class Solution {
    
    static void generateAllBinaryStrings(int n, String s, List<String> result){
        if(s.length() == n){
            result.add(s);
            return;
        }
        
        generateAllBinaryStrings(n, s + "0", result);
        if(s.isEmpty() || s.charAt(s.length() - 1) != '1'){     // add '1' only if the string s is empty or the previously added character is not '1'
            generateAllBinaryStrings(n, s + "1", result);
        }
            
    }
    
    public static List<String> generateBinaryStrings(int n) {
        // code here
        List<String> result = new ArrayList<>();
        generateAllBinaryStrings(n ,"", result);
        return result;
    }
}


=============================================================================================================================================================================================================================================================================


2)Generate Parentheses

class Solution {

    static void generateParantheses(int n, String s, int open, int close, List<String> result){
        if(s.length() == n*2){
            result.add(s);
            return;
        }
        
        if(open < n){
            generateParantheses(n, s + "(", open + 1, close, result);
        }
        
        if(close < open){
            generateParantheses(n, s + ")", open, close + 1,  result);
        }
        
    }

    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        int open = 0;
        int close = 0 ;
        generateParantheses(n , "" ,  open, close,  result);
        return result;
    }
}


===============================================================================================================================================================================================================================

3) TOWER OF HANOI

class Solution {
    
    static void savedHanoi(int n, int from, int to, int aux){
        if(n == 1){
            // System.out.println("move disk " + n + " from " + from + " to " + to);  // REMOVE THE COMMENTS TO PRINT ALL THE POSSIBLE STEPS FOR GIVEN N
            return;
        }
        
        savedHanoi(n - 1 , from, aux, to);
        // System.out.println("move disk " + n + " from " + from + " to " + to); // REMOVE THE COMMENTS TO PRINT ALL THE POSSIBLE STEPS FOR GIVEN N
        savedHanoi(n - 1 , aux, to, from);
    }
    
    public int towerOfHanoi(int n, int from, int to, int aux) {
        // code here
        savedHanoi(n, from, to , aux);
        return (int) (Math.pow(2, n) - 1);
    }
}


4) Knight Tour :

class Solution {

    static int[] xMoves = {2,2,-2,-2,1,1,-1,-1};
    static int[] yMoves = {1,-1,1,-1,2,-2,2,-2};
    
    public static boolean isSafe(int x, int y, int n, int[][] grid){
        if(x >= 0 && y >= 0 && x < n && y < n && grid[x][y] == -1){
            return true;
        }
        else{
            return false;
        }
    }
    
    public static boolean traverse(int x, int y, int n, int move, int[][] grid){
        int nextX = 0;
        int nextY = 0;
        
        if(move == n*n){ // terminating condition for 5*5 if move is 25 then just stop
            return true;
        }
        
        for(int i = 0 ; i < 8 ; i++){ // knight can only go to 8 places from a position
            nextX = x + xMoves[i]; // we need to start from position [0,0]
            nextY = y + yMoves[i];
            
            if(isSafe(nextX, nextY, n, grid)){
                grid[nextX][nextY] = move; // initialize the new position with moves
                
                if(traverse(nextX, nextY, n, move + 1,  grid)){ // check we can move forwared.
                    return true;
                }
                else{
                     grid[nextX][nextY] = -1;
                }
                
            }
        }
        return false;
    }
    
    public static boolean kinghtTour(int n){
        int[][] grid = new int[n][n];
        
        for(int i = 0; i < n; i++){
            for(int j = 0 ; j < n; j++){
                grid[i][j] = -1;
            }
        }
        
        grid[0][0] = 0;
        
        if(traverse(0 ,0 ,n , 1, grid)){
            //print all values
            // for(int i = 0 ; i < n ; i++){
            //     for(int j = 0; j < n; j++){
            //         System.out.print(grid[i][j] + " ");
            //     }
            //     System.out.println();
            // }
            return true;            
        }
        else{
            return false;
        }
    }

    public boolean checkValidGrid(int[][] grid) {
        int n = grid.length;
        // System.out.println(kinghtTour(n));
        return kinghtTour(n);
    }
}

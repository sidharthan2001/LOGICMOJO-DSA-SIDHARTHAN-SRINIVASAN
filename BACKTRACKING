1) Generate all binary strings  [DO NOT ADD THERE ARE TWO '1's CONSECUTIVE FOR EXAMPLE DO NOT CONSIDER "011" OR "110"]
   

class Solution {
    
    static void generateAllBinaryStrings(int n, String s, List<String> result){
        if(s.length() == n){
            result.add(s);
            return;
        }
        
        generateAllBinaryStrings(n, s + "0", result);
        if(s.isEmpty() || s.charAt(s.length() - 1) != '1'){     // add '1' only if the string s is empty or the previously added character is not '1'
            generateAllBinaryStrings(n, s + "1", result);
        }
            
    }
    
    public static List<String> generateBinaryStrings(int n) {
        // code here
        List<String> result = new ArrayList<>();
        generateAllBinaryStrings(n ,"", result);
        return result;
    }
}


=============================================================================================================================================================================================================================================================================


2)Generate Parentheses

class Solution {

    static void generateParantheses(int n, String s, int open, int close, List<String> result){
        if(s.length() == n*2){
            result.add(s);
            return;
        }
        
        if(open < n){
            generateParantheses(n, s + "(", open + 1, close, result);
        }
        
        if(close < open){
            generateParantheses(n, s + ")", open, close + 1,  result);
        }
        
    }

    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        int open = 0;
        int close = 0 ;
        generateParantheses(n , "" ,  open, close,  result);
        return result;
    }
}


3) TOWER OF HANOI

class Solution {
    
    static void savedHanoi(int n, int from, int to, int aux){
        if(n == 1){
            // System.out.println("move disk " + n + " from " + from + " to " + to);  // REMOVE THE COMMENTS TO PRINT ALL THE POSSIBLE STEPS FOR GIVEN N
            return;
        }
        
        savedHanoi(n - 1 , from, aux, to);
        // System.out.println("move disk " + n + " from " + from + " to " + to); // REMOVE THE COMMENTS TO PRINT ALL THE POSSIBLE STEPS FOR GIVEN N
        savedHanoi(n - 1 , aux, to, from);
    }
    
    public int towerOfHanoi(int n, int from, int to, int aux) {
        // code here
        savedHanoi(n, from, to , aux);
        return (int) (Math.pow(2, n) - 1);
    }
}

1) Traverse Linked List:

import java.util.*;

// Class for Linked List
class LinkedList {

    // Node class
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Function to print elements of linked list
    public static void printList(Node head) {
        Node curr = head;
        while (curr != null) {
            System.out.println(curr.data);
            curr = curr.next;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();  // number of elements in list
        Node head = null, tail = null;

        // Build linked list
        for (int i = 0; i < n; i++) {
            int val = sc.nextInt();
            Node newNode = new Node(val);

            if (head == null) {
                head = newNode;
                tail = newNode;
            } else {
                tail.next = newNode;
                tail = newNode;
            }
        }

        // Print linked list
        printList(head);
    }
}

==============================================================================================================================================================================================================================================================================


2) Linked List Insertion At End

/*
class Node{
    int data;
    Node next;

    Node(int x){
        data = x;
        next = null;
    }
}
*/
class Solution {
    public Node insertAtEnd(Node head, int x) {
        // code here
        Node newNode = new Node(x);
        
        if (head == null) return newNode;
        
        Node curr = head;
        
        while(curr.next != null){
            System.out.print(curr.data + " -> ");
            curr = curr.next;
            
        }
        
        curr.next = newNode;
        return curr;
    }
}


=====================================================================================================================================================================================================================================
3) Delete in a Singly Linked List:

/*
class Node
{
    int data;
    Node next;

    Node(int d)
    {
        this.data = d;
        this.next = null;
    }
}
*/
class Solution {
    Node deleteNode(Node head, int x) {
        // code here
        int count= 1;
        
        if(x == 1) return head.next;
        
        Node curr = head;
        Node prev = null;
        
        while(curr != null && count != x){
           
            prev = curr;
            curr = curr.next;
            count = count + 1;
        }
        
        prev.next = curr.next;
        
        return head;
    }
}


=================================================================================================================================================================================================================================


4) find kth node:

/*node class of the linked list
class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}
*/

class Solution {
    public int GetNth(Node head, int index) {
        // Code here
        int count = 1;
        
        Node curr = head;
        
        while(curr != null){
            if(count == index){
                return curr.data;
            }
            curr = curr.next;
            count = count + 1;
        }
        
    return -1;
    }
}


==============================================================================================================================================================================================================================


5) Kth from End of Linked List


/* Structure of node
class Node
{
    int data;
    Node next;
    Node(int d) {data = d; next = null; }
} */

class Solution {

    // Function to find the data of kth node from
    // the end of a linked list.
    int getKthFromLast(Node head, int k) {
        // Your code here
        int size = 0;
        Node curr = head;
        while(curr != null){
            size = size + 1 ;
            curr = curr.next;
        }
        
        int finalcount = size - k + 1;
        int count = 1;
        Node bat = head;
        while(bat != null){
            if(count == finalcount){
                return bat.data;
            }
            bat = bat.next;
            count = count + 1;
        }
    return -1;
    }
}


                        (OR)

/* Structure of node
class Node
{
    int data;
    Node next;
    Node(int d) {data = d; next = null; }
} */

class Solution {

    // Function to find the data of kth node from
    // the end of a linked list.
    int getKthFromLast(Node head, int k) {
        // Your code here
        if(head == null) return -1;
        
        Node slow = head;
        Node fast = head;
        
        for(int i = 0 ; i < k; i++){
            if(fast == null){
                return -1;
            }
            fast = fast.next;
        }
        
        while(fast != null){
            slow = slow.next;
            fast = fast.next;
        }
        
        return slow.data;
        
    }
}

==============================================================================================================================================================================================================================

6) linked list cycle:

public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while(fast != null && fast.next != null){
            slow= slow.next;
            fast = fast.next.next;

            if(slow == fast){
                return true;
            }
        }
    return false;
    }
}

==============================================================================================================================================================================================================================

7) middle of the linked list

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}


==============================================================================================================================================================================================================================

8) reverse doubly LL:

class Solution {
    public Node reverse(Node head) {
        // code here
        if(head.next == null) return head;
        
        Node curr = head;
        Node temp = null;
        
        while(curr != null){
            temp = curr.prev;
            curr.prev = curr.next;
            curr.next = temp;
            
            curr = curr.prev;
        }
        
        return temp.prev;
    }
}


==============================================================================================================================================================================================================================

9) Intersection of two linked list:

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int len1 = 0;
        
        ListNode curr1 = headA;
        ListNode curr2 = headB;

        while(curr1 != null){
            len1++;
            curr1 = curr1.next;
        }

        int len2 = 0;
        while(curr2 != null){
            len2++;
            curr2 = curr2.next;
        }

        int diff = 0;
        if(len1 > len2){
            diff = len1 - len2;
        }
        else{
            diff = len2 - len1;
        }

        if(len1 > len2){
    
            while(headA != null && diff != 0){
                headA = headA.next;
                diff = diff - 1;
            }
        }
        else{
            while(headB != null && diff != 0){
                headB = headB.next;
                diff = diff - 1;
            }
        }

        ListNode new1 = headA;
        ListNode new2 = headB;

        while( new1 != null && new2 != null ){
            if(new1 == new2){
                return new1;
            }
            else{
                new1 = new1.next;
                new2 = new2.next;
            }
        } 
    return null;
    }
}

==============================================================================================================================================================================================================================

10) find the first node of loop in a linked list:

class Solution {
    public int cycleStart(Node head) {
        // code here
        Node slow = head;
        Node fast = head;
        Node pos = null;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) {
                pos = slow;
                break;
            }
        }
        
        if(pos == null){
            return -1;
        }
        
        slow = head;
        while(slow != pos){
            slow = slow.next;
            pos = pos.next;
        }
        return slow.data;
    }
}
